definitions:
  main.CreatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    type: object
  main.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      token:
        type: string
      username:
        type: string
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
    type: object
  store.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.PostWithMetadata:
    properties:
      comments_count:
        type: integer
      post:
        $ref: '#/definitions/store.Post'
    type: object
  store.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for GopherSocial, a social network for Gophers
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GopherSocial API
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /health:
    get:
      consumes:
      - application/json
      description: Healthcheck for API
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "500":
          description: Internal Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Healthcheck for API
      tags:
      - health
  /post/{postID}:
    delete:
      consumes:
      - application/json
      description: Deletes a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Post Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete a post
      tags:
      - post
    patch:
      consumes:
      - application/json
      description: Updates fields of an existing post (title, content, tags)
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      - description: Updated post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/main.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Invalid request payload
          schema: {}
        "404":
          description: Post not found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update an existing post
      tags:
      - post
  /post/{postID}/:
    get:
      consumes:
      - application/json
      description: Returns a single post with metadata and comments
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a post
      tags:
      - post
  /post/create:
    post:
      consumes:
      - application/json
      description: Creates a new post with title, content, and optional tags
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/main.CreatePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Invalid request payload
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a new post
      tags:
      - post
  /user/{userID}:
    get:
      consumes:
      - application/json
      description: Returns a user's info
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user Profile
      tags:
      - user
  /user/{userID}/follow:
    put:
      consumes:
      - application/json
      description: Follows a user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User followed
        "400":
          description: User not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follows a user
      tags:
      - user
  /user/{userID}/unfollow:
    put:
      consumes:
      - application/json
      description: UnFollows a user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User unfollowed
        "400":
          description: User not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollows a user
      tags:
      - user
  /user/activate/{token}:
    put:
      consumes:
      - application/json
      description: Activates/Registers a user
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates/Registers a user
      tags:
      - user
  /user/feed:
    get:
      consumes:
      - application/json
      description: Returns paginated posts for a given user (with filters, tags, etc.)
      parameters:
      - description: Max items per page
        in: query
        name: limit
        type: integer
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      - description: Sort order (asc or desc)
        in: query
        name: sort
        type: string
      - collectionFormat: csv
        description: Filter by tags (comma separated)
        in: query
        items:
          type: string
        name: tags
        type: array
      - description: Full-text search in title/content
        in: query
        name: search
        type: string
      - description: Filter posts created since (RFC3339)
        in: query
        name: since
        type: string
      - description: Filter posts created until (RFC3339)
        in: query
        name: until
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.PostWithMetadata'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get user feed
      tags:
      - feed
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and your JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
